MACOWINS

-IDENTIFICAR REQUERIMIENTOS
Conocer precio de venta de una prenda.
Conocer tipo de una prenda.
Conocer las ganancias de un determinado dia.


-SOLUCION EN OBJETOS

class Prenda {
    var precio;
    var estado;
    var tipoDePrenda;
    
    method precioVenta(){
      return estado.modificarPrecio(precio);
    }
    
    method estado(){
        return estado;
    }
    
    method tipoDePrenda(){
        return tipoDePrenda;
    }
}

object nueva {
  
    method modificarPrecio(precio){
      return precio;
  }
}

class Promocion {
    var descuento;
    
    method modificarPrecio(precio) {
      return precio - descuento;
    }
}

object liquidacion {
    
    method modificarPrecio(precio) {
      return precio * 0.5;
    }
}

class Venta {
    var prendas = [];
    var medioDePago;
    var fecha;
    
    method cantidadDePrendasVendidas() {
        return prendas.length();
    }
    
    method gananciasDelDia(){
        return medioDePago.calcularGananciaFinal(prendas.sum({prenda => prenda.precioVenta()}));
    }
}

object efectivo {
    
    method calcularGananciaFinal(costoVenta){
        return costoVenta;
    }
}

class Tarjeta {
    var cantCuotas;
    var interes;
    
    method calcularGananciaFinal(costoVenta){
        return costoVenta + (cantCuotas*interes + 0.01*costoVenta);
    }
}


-EXPLICACION NECESARIA ADICIONAL
Como primera aclarion quiero decir que interprete que por cada dia se realiza esa sola venta, que contiene las ganancias de todo el dia,
no que puede haber mas de una venta por dia. Si asi fuera habria que hacer modificaciones al codigo para que obtengamos todas las ventas
de TAL dia y sean sumadas para obtener las ganancias del dia.
En el caso de cantidad de prendas en la clase de ventas decidi ponerlo como un metodo ya que se puede calcular facilmente, pidiendo el largo
de la lista de prendas en la venta, y no como atributo.
Los estados nueva y liquidacion, y el medio de pago efectivo son objetos ya que todos son iguales y no cambian nunca, ahora bien tanto tarjeta como
promocion son clases porque tienen atributos variables de los cuales dependen algunos metodos, y pueden ser diferentes.
Como comentario final decidi realizar esta solucion ya que se aprovecha del polimorfismo, no acoplando los objetos y cada uno son su responsabilidad
asignada.
Si queremos agregar una prenda ma de una vez a una venta tenemos que poner el objeto de esa prenda varias veces en la lista de prendas en venta.


-ALTERNATIVAS DESCARTADAS
Descarte el caso en que tanto los estados de las prendas como los medios de pagos no sean objetos. Por ejemplo si fueran strings
tendriamos que hacer una cadena de if, cuando se puede solucionar mucho mejor usando polimorfismo y tratando a cada estado como un
objeto para que tenga la responsabilidad de modificar el precio final en ambos casos. Ademas decidi no usar herencia en ningun caso,
ya que con clases y WKO alcanza.
